from openai import OpenAI
from rovoam import Agent, Chat
from datetime import datetime
from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.prompt import Prompt
from json import load, dump
from importlib import import_module

client = OpenAI(api_key="no", base_url="https://text.pollinations.ai/openai")

try:
    with open("network.conf.json", "r") as f:
        config = load(f)
except FileNotFoundError:
    config = {
        "confirmation": "cli_confirmation"
    }
    with open("network.conf.json", "w") as f:
        dump(config, f)
    exit("Default config created. Edit it (if needed) and try again.")

confirmation_handler = getattr(import_module(config["confirmation"]), "confirmation_handler")

# Code

code = Chat(
    client=client,
    model="openai-large",
    system="You're the AI for the code. You're going to get a request to generate code. In the final response, you should output clean code without your words and without a Markdown block of code. You can use a format like, \“//the same code as before\” if you are asked to change the code.",
    description="""
code:
Use this agent for code generation related tasks. Returns the code generated by the request.
Example {
    "tool": "translator",
    "message": "Code that imports the openai library and then accesses the chat completion API"
}
    """
)

developer = Agent(
    client=client,
    model="openai-large",
    system="""
You are a development agent. Organize the work of other agents to read files, generate code, translate it into diff format, use diffs, run commands in the terminal, etc.
    """,
    tools=[code],
    maxIterations=20,
    verbose=False
)

# Misc agents

translator = Chat(
    client=client,
    model="openai",
    system="You're an AI translator, you'll receive requests to translate words, sentences and texts",
    description="""
translator:
Use the translator agent only if the user explicitly requests a translatio. Do not call the translator for texts that do not require translation.
Example {
    "tool": "translator",
    "message": "Translate that into Russian: What's up?"
}
    """
)

# Superviser Agent

superviser = Agent(
    client=client, 
    model="openai-large", 
    system=f"You are Rovoam. An AGI and a universal AI. Your task is to manage other agents, coordinating their work. You must carefully plan the sequence of calls to gather all the necessary data for the next agent. You can use Markdown. Respond in the user's language unless they ask for something else. Now is {datetime.now()}.",
    tools=[translator, developer],
    maxIterations=20,
    verbose=False,
    confirmation_handler=confirmation_handler
)